{"cells":[{"cell_type":"code","source":"# -*- coding: utf-8 -*-\n\"\"\"\nFile 2: LSTM Model Training and Evaluation\nThis script trains, evaluates, and saves the LSTM model based on the\nGround Truth generated by the rule-based system. It also produces\nvisual comparison plots for selected flights.\n\"\"\"\n\nimport os\nimport pandas as pd\nimport numpy as np\nfrom scipy.io import loadmat\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport joblib\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras.utils import to_categorical\n\nwarnings.filterwarnings(\"ignore\")\n\n# --- Main Configuration ---\nSOURCE_FOLDER = r'Input_MAT'\nOUTPUT_FOLDER = r'Results/LSTM_Model_Results'\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n\nMODEL_PATH = os.path.join(OUTPUT_FOLDER, 'lstm_model.h5')\nSCALER_PATH = os.path.join(OUTPUT_FOLDER, 'scaler.gz')\nENCODER_PATH = os.path.join(OUTPUT_FOLDER, 'label_encoder.gz')\n\nEXCLUDE_FLIGHTS = ['687200111291429.mat'] # List of anomalous flights to exclude\nFLIGHTS_TO_VISUALIZE = ['687200110062033.mat', '687200110101444.mat']\nREQUIRED_FEATURES = ['ALT', 'RALT', 'ALTR', 'GS']\nTRIM_POINTS = 500\nTIME_STEPS = 10\n\n# --- Rule-Based Model (v9) Functions (used for labeling) ---\ndef classify_flight_phases_rules_v9(row):\n    alt, ralt, altr, gs = row.get('ALT', 0), row.get('RALT', 0), row.get('ALTR', 0), row.get('GS', 0)\n    if gs == 0: return 'On Stand'\n    if altr > 500: return 'Climb'\n    if ralt < 400: return 'Taxi'\n    if altr < -500 and ralt > 400: return 'Descent'\n    if alt > 25000 and gs > 60: return 'Cruise'\n    if (1000 < alt <= 25000) and (gs > 60): return 'Level Flight'\n    return 'Unknown'\n\ndef load_and_resample_mat_data(file_path, variables):\n    try:\n        mat_data = loadmat(file_path)\n        extracted_data = {}\n        max_length = 0\n        for var_name in variables:\n            try:\n                data_array = mat_data[var_name]['data'][0, 0].ravel()\n                extracted_data[var_name] = data_array\n                if len(data_array) > max_length:\n                    max_length = len(data_array)\n            except (KeyError, IndexError): return None\n        df = pd.DataFrame(index=range(max_length))\n        for var_name, data_array in extracted_data.items():\n            s = pd.Series(data_array)\n            if len(s) < max_length:\n                s = s.reindex(range(max_length)).fillna(method='ffill').fillna(method='bfill')\n            df[var_name] = s\n        for var in variables:\n            if var not in df.columns: df[var] = 0\n        if len(df) > TRIM_POINTS: df = df.iloc[:-TRIM_POINTS]\n        return df.astype(float)\n    except Exception: return None\n\n# --- LSTM Data Preparation Functions ---\ndef create_training_sequences(X, y, time_steps=1):\n    Xs, ys = [], []\n    for i in range(len(X) - time_steps):\n        v = X.iloc[i:(i + time_steps)].values\n        Xs.append(v)\n        ys.append(y.iloc[i + time_steps])\n    return np.array(Xs), np.array(ys)\n\ndef create_prediction_sequences(X, time_steps=1):\n    Xs = []\n    for i in range(len(X) - time_steps):\n        v = X.iloc[i:(i + time_steps)].values\n        Xs.append(v)\n    return np.array(Xs)\n\n# --- Main Functions ---\ndef train_and_save_model():\n    print(\"--- Training LSTM model (this may take several minutes)... ---\")\n    all_mat_files = sorted([f for f in os.listdir(SOURCE_FOLDER) if f.endswith('.mat') and f not in EXCLUDE_FLIGHTS])\n    \n    all_flights_df_list = []\n    for flight_file in all_mat_files:\n        flight_path = os.path.join(SOURCE_FOLDER, flight_file)\n        df = load_and_resample_mat_data(flight_path, REQUIRED_FEATURES)\n        if df is not None and not df.empty:\n            df['Phase'] = df.apply(classify_flight_phases_rules_v9, axis=1)\n            df = df[df['Phase'] != 'Unknown']\n            all_flights_df_list.append(df)\n\n    master_df = pd.concat(all_flights_df_list, ignore_index=True).dropna()\n    \n    scaler = StandardScaler().fit(master_df[REQUIRED_FEATURES])\n    label_encoder = LabelEncoder().fit(master_df['Phase'])\n    \n    X_scaled = scaler.transform(master_df[REQUIRED_FEATURES])\n    y_encoded = label_encoder.transform(master_df['Phase'])\n    \n    X_seq, y_seq = create_training_sequences(pd.DataFrame(X_scaled), pd.Series(y_encoded), TIME_STEPS)\n    y_cat = to_categorical(y_seq, num_classes=len(label_encoder.classes_))\n    \n    model = Sequential([\n        LSTM(64, input_shape=(X_seq.shape[1], X_seq.shape[2]), return_sequences=True),\n        Dropout(0.2),\n        LSTM(32, return_sequences=False),\n        Dropout(0.2),\n        Dense(len(label_encoder.classes_), activation='softmax')\n    ])\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    model.fit(X_seq, y_cat, epochs=10, batch_size=256, validation_split=0.1, verbose=1)\n    \n    model.save(MODEL_PATH)\n    joblib.dump(scaler, SCALER_PATH)\n    joblib.dump(label_encoder, ENCODER_PATH)\n    print(f\"--- Model and preprocessors saved to: {OUTPUT_FOLDER} ---\")\n    return model, scaler, label_encoder\n\ndef evaluate_and_visualize(model, scaler, label_encoder):\n    print(\"\\n--- Generating visual comparisons for selected flights... ---\")\n    for flight_file in FLIGHTS_TO_VISUALIZE:\n        print(f\"  Processing: {flight_file}\")\n        flight_path = os.path.join(SOURCE_FOLDER, flight_file)\n        df_vis = load_and_resample_mat_data(flight_path, REQUIRED_FEATURES)\n        \n        if df_vis is not None:\n            df_vis['Rule_Phase'] = df_vis.apply(classify_flight_phases_rules_v9, axis=1)\n            \n            X_vis_scaled = scaler.transform(df_vis[REQUIRED_FEATURES])\n            X_vis_seq = create_prediction_sequences(pd.DataFrame(X_vis_scaled), TIME_STEPS)\n            \n            y_pred_probs = model.predict(X_vis_seq)\n            y_pred = np.argmax(y_pred_probs, axis=1)\n            y_pred_labels = label_encoder.inverse_transform(y_pred)\n            \n            df_vis['LSTM_Phase'] = [None]*TIME_STEPS + list(y_pred_labels)\n            \n            fig, axes = plt.subplots(2, 1, figsize=(20, 16), sharex=True)\n            fig.suptitle(f'Visual Comparison for Flight: {flight_file}', fontsize=20)\n            color_map = {'On Stand': 'darkgrey', 'Taxi': 'grey', 'Climb': 'green', 'Cruise': 'blue', 'Descent': 'purple', 'Level Flight': 'cyan', 'Unknown': 'white'}\n            \n            axes[0].set_title('Rule-Based Model (Ground Truth)', fontsize=16)\n            axes[0].plot(df_vis.index, df_vis['ALT'], color='black', linewidth=1.5)\n            for phase, color in color_map.items():\n                axes[0].fill_between(df_vis.index, 0, df_vis['ALT'].max()*1.1, where=(df_vis['Rule_Phase'] == phase), facecolor=color, alpha=0.6)\n            axes[0].set_ylabel('Altitude (ft)'); axes[0].grid(True, linestyle='--')\n            \n            axes[1].set_title('LSTM Model (Prediction)', fontsize=16)\n            axes[1].plot(df_vis.index, df_vis['ALT'], color='black', linewidth=1.5)\n            for phase, color in color_map.items():\n                axes[1].fill_between(df_vis.index, 0, df_vis['ALT'].max()*1.1, where=(df_vis['LSTM_Phase'] == phase), facecolor=color, alpha=0.6)\n            axes[1].set_xlabel('Time Steps'); axes[1].set_ylabel('Altitude (ft)'); axes[1].grid(True, linestyle='--')\n\n            handles = [plt.Rectangle((0,0),1,1,color=color_map[label], alpha=0.6) for label in label_encoder.classes_ if label in color_map]\n            labels = [label for label in label_encoder.classes_ if label in color_map]\n            fig.legend(handles, labels, title='Flight Phases', bbox_to_anchor=(1.0, 0.9), loc='upper left')\n\n            plt.tight_layout(rect=[0, 0, 0.9, 0.96])\n            output_image_path = os.path.join(OUTPUT_FOLDER, f'comparison_{flight_file.replace(\".mat\", \"\")}.png')\n            plt.savefig(output_image_path, bbox_inches='tight')\n            print(f\"    -> Comparison plot saved to: {output_image_path}\")\n            plt.close(fig)\n        else:\n            print(f\"    -> Warning: Failed to process {flight_file} for visualization.\")\n\nif __name__ == \"__main__\":\n    if not os.path.exists(MODEL_PATH):\n        model, scaler, label_encoder = train_and_save_model()\n    else:\n        print(\"--- Loading pre-trained model ---\")\n        model = load_model(MODEL_PATH)\n        scaler = joblib.load(SCALER_PATH)\n        label_encoder = joblib.load(ENCODER_PATH)\n        print(\"--- Model loaded successfully ---\")\n    \n    evaluate_and_visualize(model, scaler, label_encoder)\n    print(\"\\n--- LSTM model evaluation and visualization completed! ---\")","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}